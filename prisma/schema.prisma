generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  facebook      String?
  instagram     String?
  twitter       String?
  createdAt     DateTime  @default(now())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  point         Int       @default(0)
  bio           String?
  Account       Account[]
  ideas         Idea[]
  Product       Product[]
  sessions      Session[]
}

model Account {
  id                 String  @id
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  User               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String     @id
  link        String?
  title       String
  type        Type[]
  brief       String
  description String
  image       String[]
  vote        Int?       @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  authorId    String
  categories  Category[]
  User        User       @relation(fields: [authorId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Idea {
  id             String     @id @default(cuid())
  title          String
  type           Type[]
  description    String
  feature        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  authorId       String
  author         User       @relation(fields: [authorId], references: [id])
  categories     Category[] 
}

enum Type {
  WEB
  APP
  EXTENSION
  TOOL
  CHATBOT
  AI
  GAME
}

enum Category {
  EDUCATION
  SOCIAL_MEDIA
  BLOG
  MUSIC
  ECONOMIC
  ENTERTAINMENT
  TECHNOLOGY
  MOVIE
  ART 
  MARKETING
  BUSINESS
  THRILLER
  ROMANCE
}
